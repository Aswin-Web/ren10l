// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id String @id @default(uuid())
  customer_name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CustomerMappedComplexes CustomerMappedComplexes[]

  CustomerAddress CustomerAddress[]

  CustomerContactInfo CustomerContactInfo[]

  CustomerEmailInfo CustomerEmailInfo[]

  CustomerFilesInfo CustomerFilesInfo[]

  CustomerGuardian CustomerGuardian[]
}

enum FileDocType {
  PassportImg
  AddressProof
  PaymentSlips
  InternalDocs
  Others
}

model FileDocs {
  file_id Int @id @default(autoincrement())
  file_name String
  file_internal_name String
  file_location String
  file_size String
  file_type FileDocType
  comments String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CustomerFilesInfo CustomerFilesInfo[]
}

model AppServices {
  services_id Int @default(autoincrement()) @id
  service_internal_name String
  service_external_name String?
  service_note String?
  service_description String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  OrganizationServices OrganizationServices[]
}

enum LinkType{
  NAVMENU
  SIDEBARMENU
  DEFAULT
  ADMIN
  USER
}

model ServicesNavLink{
  link_id Int @default(autoincrement()) @id
  link_name String
  link_href String
  link_type LinkType
  link_icon String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  NavlinkMasterMapper NavlinkMasterMapper[]
}


model MasterLink {
  master_link_id Int @id @default(autoincrement())
  master_internal_name  String
  master_external_name String
  NavlinkMasterMapper NavlinkMasterMapper[]
}

model NavlinkMasterMapper{
  id Int @id @default(autoincrement())
  master_link_id Int
  master_link MasterLink @relation(fields: [master_link_id  ],references: [master_link_id])
  order_no Int @default(0)
  link_id Int
  link ServicesNavLink @relation(fields: [link_id], references: [link_id])
}

model Address {
  address_id Int @default(autoincrement()) @id
  address_line_1 String?
  address_line_2 String?
  address_line_3 String?
  address_line_4 String?
  area String
  pincode Int
  state String
  country String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  Complexes Complexes[]

  CustomerAddress CustomerAddress[]

  CustomerGuardian CustomerGuardian[]
}

model ContactInfo{
  contact_id Int @id @default(autoincrement())
  contact_number Int
  contact_code String?
  country_code String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CustomerContactInfo CustomerContactInfo[]

  CustomerGuardian CustomerGuardian[]
}

model EmailInfo{
  email_id Int @id @default(autoincrement())
  email String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CustomerEmailInfo CustomerEmailInfo[]

  CustomerGuardian CustomerGuardian[]
}

model User {
  user_id String @id @default(uuid())
  email  String @unique
  username String?
  display_picture String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  Organization Organization[]

  Complexes Complexes[]

  ComplexFloors ComplexFloors[]

  FloorSpaces FloorSpaces[]

  CustomerMappedComplexes CustomerMappedComplexes[]

  CustomerAddress CustomerAddress[]

  CustomerContactInfo CustomerContactInfo[]

  CustomerEmailInfo CustomerEmailInfo[]

  CustomerFilesInfo CustomerFilesInfo[]
}

model Organization {
  org_id String @id @default(uuid())
  org_internal_name String @unique
  org_external_name String?
  user_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user User @relation(fields: [user_id],references: [user_id])

  OrganizationServices OrganizationServices[]

  CustomerMappedComplexes CustomerMappedComplexes[]

  Complexes Complexes[]
}

model OrganizationServices{
  org_service_id String @id @default(uuid())
  service_id Int
  service_name String?
  org_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  service AppServices @relation(fields: [service_id],references: [services_id])
  org Organization @relation(fields: [org_id],references: [org_id])

  Complexes Complexes[]

  ComplexFloors ComplexFloors[]

  FloorSpaces FloorSpaces[]

  CustomerMappedComplexes CustomerMappedComplexes[]
}

model MetafilesInfo {
  meta_file_id Int @default(autoincrement()) @id
  external_name String
  description String
  comments String
  file_path String
  file_type String
}

model AnchorLinks {
  link_id Int @default(autoincrement()) @id()
  external_name String
  description String
  href_link String
  comments String
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}


model Projects {
  project_id String @default(uuid()) @id
   project_name String
description String
objectives String
stakeholders String
start_date DateTime
end_date DateTime
status  ProjectStatus
}

model ProjectDocunments{

}

model ProjectFeatures{

}

model ProjectUsers {

}

model TicketInfo{

}

model TicketLogs{

}






model Complexes {
  complex_id Int @id @default(autoincrement())
  complex_display_name String
  comples_full_name String?
  available_floors Int
  address_id Int?
  org_service_id String
  user_id String
  org_service OrganizationServices @relation(fields: [org_service_id],references: [org_service_id])
  user User @relation(fields: [user_id],references: [user_id])
  address Address? @relation(fields: [address_id],references: [address_id])
  complex_init_status Boolean @default(false)
  org_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  org Organization @relation(fields: [org_id],references: [org_id])
  ComplexFloors ComplexFloors[]

  FloorSpaces FloorSpaces[]

  CustomerMappedComplexes CustomerMappedComplexes[]
}

model ComplexFloors {
  floor_id Int @id @default(autoincrement())
  floor_code String
  floor_name String
  floor_order Int
  available_floor_space Int
  org_service_id String
  user_id String
  complex_id Int
  complex Complexes @relation(fields: [complex_id],references: [complex_id])
  org_service OrganizationServices @relation(fields: [org_service_id],references: [org_service_id])
  user User @relation(fields: [user_id],references: [user_id])
  floor_init_status Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  FloorSpaces FloorSpaces[]

  CustomerMappedComplexes CustomerMappedComplexes[]
}

model FloorSpaces {
  space_id Int @id @default(autoincrement())
  space_code String
  space_name String
  space_comments String?
  space_max_customers Int
  space_filled_customers Int
  space_balance_customers Int
  space_rent_per_customer Int
  org_service_id String
  floor_id Int 
  user_id String
  complex_id Int
  floor ComplexFloors @relation(fields: [floor_id],references: [floor_id])
  complex Complexes @relation(fields: [complex_id],references: [complex_id])
  org_service OrganizationServices @relation(fields: [org_service_id],references: [org_service_id])
  user User @relation(fields: [user_id],references: [user_id])
created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CustomerMappedComplexes CustomerMappedComplexes[]
}

model CustomerMappedComplexes{
  id Int @id @default(autoincrement())
  customer_id String
  complex_id Int
  floor_id Int
  space_id Int
  org_service_id String
  user_id String
  org_id String
  org Organization @relation(fields: [org_id],references: [org_id]) 
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  complex Complexes @relation(fields: [complex_id],references: [complex_id])
  floor ComplexFloors @relation(fields: [floor_id],references: [floor_id])
  space FloorSpaces @relation(fields: [space_id],references: [space_id])
  org_service OrganizationServices @relation(fields: [org_service_id],references: [org_service_id])
  user User @relation(fields: [user_id],references: [user_id]) 
  payment_date String
  advance_amount Int?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

}

model CustomerAddress{
  id Int @default(autoincrement()) @id
  address_id Int
  address Address @relation(fields: [address_id],references: [address_id])
  customer_id String
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  is_permanent Boolean @default(false)
  user_id String
  user User @relation(fields: [user_id],references: [user_id]) 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

}
model CustomerContactInfo {
  id Int @default(autoincrement()) @id
  customer_id String
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  contact_id Int
  contact ContactInfo @relation(fields: [contact_id],references: [contact_id])
  is_permanent Boolean @default(false)
   user_id String
  user User @relation(fields: [user_id],references: [user_id]) 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

}
model CustomerEmailInfo{
  id Int @default(autoincrement()) @id
  customer_id String
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  email_id Int
  email EmailInfo @relation(fields: [email_id],references: [email_id])
  is_permanent Boolean @default(false)
  user_id String
  user User @relation(fields: [user_id],references: [user_id]) 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

}
model CustomerFilesInfo{
  id Int @default(autoincrement()) @id
  customer_id String
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  file_id Int
  file FileDocs @relation(fields: [file_id],references: [file_id])
  file_comments String
  user_id String
  user User @relation(fields: [user_id],references: [user_id]) 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model CustomerGuardian{
  id Int @default(autoincrement()) @id
  customer_id String
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  guardian_type String
  guardian_name String
  email_id Int
  email EmailInfo @relation(fields: [email_id],references: [email_id])
  contact_id Int
  contact ContactInfo @relation(fields: [contact_id],references: [contact_id])
  address_id Int
  address Address @relation(fields: [address_id],references: [address_id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}